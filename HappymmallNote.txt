Happymmall-Project_StudyNote:

git初始化（在Idea编译器中进行git操作）
         本课程使用oschina 码农这个git平台，当然，自己也可以用gitHub这些平台。
	    
		 在Terminal中敲击命令依次如下：	 
         touch README.md    //创建README.md文件（并且在文件中添加内容：mmall_learning，保存）
		 touch .gitignore   //创建.gitignore文件。
		                    //作用是：把配置的文件匹配上的进行忽略，不会检测本地的变化，也不会推送到远程git仓库上。
							//该文件使用#标记为注释
		 git init           //初始化。会生成一个.git文件
		 git status         //则可以看到项目中有哪些文件发生了变化（红色）
		 git add .          //添加所有的变化文件
		 git status         //刚才红色标记的文件变成绿色（绿色）
		 git commit -am 'first commit init project'  //提交到本地仓库中，其中'first commit init project'表示描述
		 git remote add origin https://github.com/congwz/happymmallStudy.git  //连接远程仓库。
		                                                                      //https://github.com/congwz/happymmallStudy.git是远程仓库（即git地址）
         git branch         //查看分支。可以看到在master这个分支上（即：本地的git仓库在master分支上）
		 git pull           //拉取远程上分支的内容（把本地更新为最新的）
		 git push -u origin master //推送到远程。若报错，可以使用强制推送：git push -u -f origin master 
		                           //则远程仓库上的master分支下的内容就是我们刚才在项目中添加的文件：READEME.md、.gitignore、pom.xml、src/main/webapp
		 //至此，git的项目初始化已经完成啦。
		 
		 扩展：
		     git branch      //查看当前分支。可以看到在master上
			 git branch -r   //查看远程分支。可以看到在origin/master上
			 //本课程采用分支开发，主干发布
			 git checkout -b v1.0 origin/master  //在master上创建一个新分支：v1.0
			 git branch                          //查看当前分支。可以看到现在在v1.0分支上
			 git push origin HEAD -u             //将该分支（v1.0分支）推送到远程git上。然后打开码云（或者gitHub）平台，可以看到分支已经有两个了：master和v1.0
			                                     //并且v1.0分支里的内容同master。--->因为该命令： git checkout -b v1.0 origin/master，才得以实现。

												 


maven的pom文件配置（pom文件说明）
友情资源： maven提供的中央仓库是： search.maven.org  ------>通过这个中央仓库，可以快速搜索到需要的依赖配置code。
      1. eg. <groupId>com</groupId>
	  2. eg. <artifactId>mmall</artifactId>
	  3. eg. <packageing>war</packageing>        //打包成war包
	  4. eg. <version>1.0-SNAPSHOT</version>     //1.0的快照版
	  5. eg. <name>mmall Maven Webpage</name>
	  6. eg. <url>http://maven.apache.org</url>
	  
	  7. <properties>
	       ...   //在pom中的一些自定义配置（作用：下面<dependencies>时一些常量的引用，引用方式：${属性名称}）
	     </properties>
		 
	  8. <dependencies>   //配置依赖，也是项目的主要配置
	  
	       <dependency>
		      ...
		   </dependency>
		   
		   <dependency>
		      ...
		   </dependency>
		    .
			.
			.
	     
		 </dependencies>
		 
	  9. <build>
	       
	        <finalName>mmall</finalName>  //finalName和项目名保持一致哦
			<plugins>  //插件
			
			   <plugin>
			      ...  
			   </plugin>
			   
			   <plugin>
			      ...
			   </plugin>
			   .
			   .
			   .
			  
			</plugins>
			
	     </build>


web.xml、Spring、SpringMVC配置：
    1、web.xml
	  web.xml--->在webpapp文件夹下的WEB-INF文件夹下。
	  配置过滤器： <filter>...</filter>
	             <filter-mapping>...</filter-mapping>    //配置拦截的请求（url）
				 
	  配置监听器： <listener>...</listener>   
	  
	  配置Spring: <context-param>...</context-param>  
	             /*
				 其中：classpath:applicationContext.xml--->通过listen监听到后，加载这个配置文件applicationContext.xml
				 并且通过这个配置文件进行web容器和spring容器的整合。
				 */
	  
	  配置SpringMVC： <servlet>...</servlet>
	                 <servlet-mapping>...</servlet-mapping>  //配置拦截的请求（url）
	  
    2、Spring配置：
	  applicationContext.xml--->spring容器的主要配置
	  applicationContext.xml--->在resources文件夹下（与mappers文件夹同级）
	  在该文件中：
	            <context:component-scan base-package="com.mmall" annotation-config="true"/>  
				//component-scan是扫描，扫描com.mmall这个包下的一些注解，从而方便的在类中进行注入
				
				<aop:aspectj-sutoproxy/>  //AOP配置
				
				<import resource="applicationContext-datasource.xml" />  
				//把当前的spring容器的配置文件进行分离，分离出一个applicationContext-datasource.xml
	  applicationContext-datasource.xml
	  applicationContext-datasource.xml--->在resources文件夹下（与mappers文件夹同级）
	  由applicationContext-datasource.xml分离的datasource.properties--->在resources文件夹下（与mappers文件夹同级）
	  在该文件中：
	            <context:component-scan base-package="com.mmall" annotation-config="true"/> 
				
				//这个bean的作用是配置Spring文件的时候，把里面的常量进行分离，分离到datasource.properties里面。
				//那么，Spring配置文件会引用这个文件datasource.properties里的Key,把value填充进去。
				<bean id="..." class="org.springframework...">  
				  <property name="..." [value="..."]/>
				  <property .../>
				  .
				  .
				  .
				</bean>
				
				//这个bean的作用是配置数据库连接池
				<bean id="..." class="org.springframework...">
				  <property name="..." [value="..."]/>
				  <property .../>
				  .
				  .
				  .				
				</bean>
				
				//这个bean的作用是配置mybatis的SqlSessionFactoryBean
				//包括引用（ref）上面的连接池，mapper层的文件、分页插件
				<bean id="..." class="org.springframework...">
				  <property name="..." [value="..."]/>
				  <property .../>
				  .
				  .
				  .				
				</bean>
				
				//作用：Mybatis的扫描--->扫描Dao层（Dao层是给Service层提供接口的）
				<bean id="..." class="org.springframework...">
				  <property name="..." value="com.mmall.dao"/>			
				</bean>
	            
				//Spring事务管理的配置
				<tx:annotation-driven .../>
				<bean id="..." class="org.springframework...">
				  <property name="..." [ref="..."]/>
				  <property name="..." [value="..."]/>
				  <property .../>
				  .
				  .
				  .				
				</bean>
	   
    3、SpringMVC配置： 
	  dispatcher-servlet.xml(默认文件名，如果要修改文件名，可以在web.xml中的配置DispatcherServlet的servlet节点下添加<init-param>标签来设置SpringMVC配置文件名)
	  dispatcher-servlet.xml--->在webpapp文件夹下的WEB-INF文件夹下。
	  在该文件中：
	         <context:component-scan base-package="com.mmall" annotation-config="true"/>  
			 
			 <mvc:annotation-driven>
			   <mvc:message-converters>
			   
			     <bean class="org.springframework...">
				   <property name="...">
				     <list>
					  <value>...</value>
					  <value>...</value>
					  .
					  .
					  .
					 </list>
				   </property>
				 </bean>
				 
				 <bean class="org.springframework...">
				   <propery name="...">
				      <list>
					  <value>...</value>
					  <value>...</value>
					  .
					  .
					  .
					  </list>
				   </property>
				 </bean>
				 .
				 .
				 .
			   
			   </mvc:message-converters>
			  </mvc:annotation-driven>
			 
			 //SpringMVC的文件上传
			 <bean id="..." class="org.springframework...">
			   <property name="..." value="..." />
			   <property name="..." value="..." />
			   .
			   .
			   .
			 </bean>
	            
	   
各功能模块开发：		 
	  
一、